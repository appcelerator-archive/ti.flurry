/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.flurry;

import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import android.app.Activity;
import android.location.Criteria;

import com.flurry.android.*;

@Kroll.module(name="FlurryAndroid", id="ti.flurry")
public class FlurryAndroidModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "FlurryAndroidModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	@Kroll.constant public static final int ACCURACY_COARSE = Criteria.ACCURACY_COARSE;
	@Kroll.constant public static final int ACCURACY_FINE = Criteria.ACCURACY_FINE;
	@Kroll.constant public static final int ACCURACY_HIGH = Criteria.ACCURACY_HIGH;
	@Kroll.constant public static final int ACCURACY_LOW = Criteria.ACCURACY_LOW;
	@Kroll.constant public static final int ACCURACY_MEDIUM = Criteria.ACCURACY_MEDIUM;
	
	@Kroll.constant public static final byte MALE = Constants.MALE;
	@Kroll.constant public static final byte FEMALE = Constants.FEMALE;
	public static final byte UNKNOWN = Constants.UNKNOWN;
	
	
	public FlurryAndroidModule()
	{
		super();
	}
	
	/*
	 * Utility function to ensure that Javascript object passed to module is converted
	 * to string for both key and value
	 */
	private HashMap<String,String> fixProperties(HashMap props)
	{
		HashMap<String,String> fixedMap = new HashMap<String,String>();
		for (Object key : props.keySet().toArray()) 
		{
			String k = (String)key;
			String v = "";
			
			if (props.get(key) instanceof Integer)
			{
				Integer temp = (Integer) props.get(key);
				v = Integer.toString(temp);
			}
			else
			{
				v = (String)props.get(key);
			}
			
			fixedMap.put(k, v);
		}
		
		return fixedMap;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	
	@Override
	public void onDestroy(Activity activity) 
	{
		// This method is called when the root context is being destroyed

		Log.d(TAG, "FlurryAndroidModule destroy");

		super.onDestroy(activity);
		FlurryAgent.onEndSession(this.getActivity());
	}

	// Methods
	@Kroll.method
	public void initialize(String key)
	{
		Log.d(TAG, "initialize called");
		FlurryAgent.onStartSession(this.getActivity(), key);
	}
	
	@Kroll.method
	public void logEvent(Object[] args)
	{
		if (args == null)
		{
			// throw error
			Log.e(TAG, "logEvent called with null args");
			return;
		}
		
		Log.d(TAG, "logEvent called");
		HashMap props = null;
		String event = (String)args[0];
		if (args.length > 1)
		{
			props = (HashMap)args[1];
		}
		
		if (props == null)
		{
			FlurryAgent.logEvent(event);
		}
		else
		{			
			FlurryAgent.logEvent(event, this.fixProperties(props));
		}
	}
	
	@Kroll.method
	public void logTimedEvent(Object[] args)
	{
		if (args == null)
		{
			// throw error
			Log.e(TAG, "logTimedEvent called with null args");
			return;
		}
		
		Log.d(TAG, "logTimedEvent called");
		HashMap props = null;
		String event = (String)args[0];
		if (args.length > 1)
		{
			props = (HashMap)args[1];
		}
		
		if (props == null)
		{
			FlurryAgent.logEvent(event, true);
		}
		else
		{
			FlurryAgent.logEvent(event, this.fixProperties(props), true);
		}
	}

	
	@Kroll.method
	public void endTimedEvent(Object[] args)
	{
		if (args == null)
		{
			// throw error
			Log.e(TAG, "endTimedEvent called with null args");
			return;
		}
		
		Log.d(TAG, "endTimedEvent called");
		HashMap props = null;
		String event = (String)args[0];
		if (args.length > 1)
		{
			props = (HashMap)args[1];
		}
		
		if (props == null)
		{
			FlurryAgent.endTimedEvent(event);
		}
		else
		{
			FlurryAgent.endTimedEvent(event, this.fixProperties(props));
		}
	}
	
	@Kroll.method
	public void logPageView()
	{
		FlurryAgent.onPageView();
	}
	
	
	@Kroll.setProperty
	public void setUserID(String value) {
		Log.d(TAG, "set Flurry User ID: " + value);
		FlurryAgent.setUserId(value);
	}
	
	@Kroll.setProperty
	public void setAge(int value) {
		Log.d(TAG, "set Flurry User Age: " + value);
		FlurryAgent.setAge(value);
	}
	
	@Kroll.setProperty
	public void setGender(String value) {
		Log.d(TAG, "set Flurry Gender: " + value);
	
		if (value == null)
		{
			// throw error
			Log.e(TAG, "setGender called with null args");
			return;
		}
		
		byte gender = UNKNOWN;
		
		if (value.equalsIgnoreCase("M"))
		{
			gender = MALE;
		}
		else if (value.equalsIgnoreCase("F"))
		{
			gender = FEMALE;
		}
		else 
		{
			// throw error
			Log.w(TAG, "setGender called with invalid args. Setting gender to unknown");
		}
		
		FlurryAgent.setGender(gender);
	}
	
	@Kroll.setProperty
	public void setDdebugLogEnabled(Boolean value) {
		Log.d(TAG, "set Flurry DebugLogEnabled: " + value);
		FlurryAgent.setLogEnabled(value);
	}
	
	@Kroll.setProperty
	public void setEventLoggingEnabled(Boolean value) {
		Log.d(TAG, "set Flurry EventLoggingEnabled: " + value);
		FlurryAgent.setLogEvents(value);
	}
	
	@Kroll.setProperty
	public void setSecureTransportEnabled(Boolean value) {
		Log.d(TAG, "set Flurry SecureTransportEnabled: " + value);
		FlurryAgent.setUseHttps(value);
	}
	
	@Kroll.setProperty
	public void setReportLocation(Boolean value) {
		Log.d(TAG, "set Flurry ReportLocation: " + value);
		FlurryAgent.setReportLocation(value);
	}
	
	@Kroll.method
	public void setLocationCriteria(Object arg)
	{
		Log.d(TAG, "set Flurry LocationCriteria: " + arg);
		if (arg == null)
		{
			// throw error
			Log.e(TAG, "set LocationCriteria called with null args");
			return;
		}
		
		if (arg instanceof HashMap) 
		{
			HashMap<String, Object> kd = (HashMap<String, Object>)arg;
			
			Criteria crit = new Criteria();
			if (kd.containsKey("horizontalAccuracy"))
				crit.setHorizontalAccuracy((Integer) kd.get("horizontalAccuracy"));
			if (kd.containsKey("verticalAccuracy"))
				crit.setVerticalAccuracy((Integer) kd.get("verticalAccuracy"));
			if (kd.containsKey("accuracy"))
				crit.setVerticalAccuracy((Integer) kd.get("accuracy"));
			
			FlurryAgent.setLocationCriteria(crit);
		}
		else
		{
			//throw error
		}	
	}
	
	/*@Kroll.setProperty
	public void setSessionReportsOnPauseEnabled(Boolean value) {
		Log.d(TAG, "set Flurry setSecureTransportEnabled: " + value);
		FlurryAgent.set(value);
	}*/

}

